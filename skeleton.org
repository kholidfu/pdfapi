* Project Skeleton
  This project aims to build a simple RESTFUL API using Python, Flask, and
  MongoDB
* Fast Deployment
** Fast deployment (using DO and namecheap API)
   First, we have to develop (templating) in localhost, once it done, we can
   deploy it to the server with a single keystroke.
   What we need:
*** DO API
    create new droplet, specs:
    - [ ] ubuntu 13.10 x64 (1505699)
      #+BEGIN_SRC python
        from dop.client import Client
        
        client = Client('client_id', 'api_key')        
        print([image.to_json() for image in client.images()])
        """
        [{'distribution': u'CentOS', 'id': 1601, 'name': u'CentOS 5.8 x64'},
         {'distribution': u'CentOS', 'id': 1602, 'name': u'CentOS 5.8 x32'},
         {'distribution': u'Debian', 'id': 12573, 'name': u'Debian 6.0 x64'},
         {'distribution': u'Debian', 'id': 12575, 'name': u'Debian 6.0 x32'},
         {'distribution': u'Ubuntu', 'id': 14097, 'name': u'Ubuntu 10.04 x64'},
         {'distribution': u'Ubuntu', 'id': 14098, 'name': u'Ubuntu 10.04 x32'},
         {'distribution': u'Fedora', 'id': 32387, 'name': u'Fedora 17 x32'},
         {'distribution': u'Fedora', 'id': 32399, 'name': u'Fedora 17 x32 Desktop'},
         {'distribution': u'Fedora', 'id': 32419, 'name': u'Fedora 17 x64 Desktop'},
         {'distribution': u'Fedora', 'id': 32428, 'name': u'Fedora 17 x64'},
         {'distribution': u'Debian', 'id': 303619, 'name': u'Debian 7.0 x32'},
         {'distribution': u'Debian', 'id': 308287, 'name': u'Debian 7.0 x64'},
         {'distribution': u'Ubuntu', 'id': 345791, 'name': u'Ubuntu 13.04 x32'},
         {'distribution': u'Ubuntu', 'id': 350076, 'name': u'Ubuntu 13.04 x64'},
         {'distribution': u'Arch Linux', 'id': 350424, 'name': u'Arch Linux 2013.05 x64'},
         {'distribution': u'Arch Linux', 'id': 361740, 'name': u'Arch Linux 2013.05 x32'},
         {'distribution': u'CentOS', 'id': 376568, 'name': u'CentOS 6.4 x32'},
         {'distribution': u'Ubuntu', 'id': 433240, 'name': u'Ubuntu 12.10 x32'},
         {'distribution': u'Ubuntu', 'id': 459444, 'name': u'LAMP on Ubuntu 12.04'},
         {'distribution': u'Ubuntu', 'id': 473123, 'name': u'Ubuntu 12.10 x64'},
         {'distribution': u'Ubuntu', 'id': 473136, 'name': u'Ubuntu 12.10 x64 Desktop'},
         {'distribution': u'CentOS', 'id': 562354, 'name': u'CentOS 6.4 x64'},
         {'distribution': u'Fedora', 'id': 696598, 'name': u'Fedora 19 x64'},
         {'distribution': u'Fedora', 'id': 697056, 'name': u'Fedora 19 x32'},
         {'distribution': u'Ubuntu', 'id': 962304, 'name': u'Ubuntu 13.10 x32'},
         {'distribution': u'Ubuntu', 'id': 1061995,'name': u'Wordpress on Ubuntu 12.10'},
         {'distribution': u'Ubuntu', 'id': 1420643, 'name': u'MEAN on Ubuntu 12.04.3'},
         {'distribution': u'Ubuntu', 'id': 1505447, 'name': u'Ubuntu 12.04.3 x64'},
         {'distribution': u'Ubuntu', 'id': 1505527, 'name': u'Ubuntu 12.04.3 x32'},
         {'distribution': u'Ubuntu', 'id': 1505699, 'name': u'Ubuntu 13.10 x64'},
         {'distribution': u'Ubuntu', 'id': 1608711, 'name': u'Ruby on Rails on Ubuntu 12.10 (Nginx + Unicorn)'},
         {'distribution': u'CentOS', 'id': 1646467, 'name': u'CentOS 6.5 x64'},
         {'distribution': u'CentOS', 'id': 1646732, 'name': u'CentOS 6.5 x32'},
         {'distribution': u'Ubuntu', 'id': 1687372, 'name': u'Redmine on Ubuntu 12.04'},
         {'distribution': u'Ubuntu', 'id': 1860934, 'name': u'Ghost 0.4.0 on Ubuntu 12.04'},
         {'distribution': u'Ubuntu', 'id': 2105243, 'name': u'GitLab 6.5.1 CE'},
         {'distribution': u'Ubuntu', 'id': 2118237, 'name': u'Dokku-v0.2.1 on Ubuntu 13.04'},
         {'distribution': u'Ubuntu', 'id': 2158507, 'name': u'Docker 0.8 Ubuntu 13.04 x64'}]
        """
        
      #+END_SRC
      
    - [ ] region new york (1)
      #+BEGIN_SRC python
        from dop.client import Client
        
        client = Client('client_id', 'api_key')
        print([region.to_json() for region in client.regions()])
        """
        [
            {'id': 1, 'name': u'New York 1'},
            {'id': 2, 'name': u'Amsterdam 1'},
            {'id': 3, 'name': u'San Francisco 1'},
            {'id': 4, 'name': u'New York 2'},
            {'id': 5, 'name': u'Amsterdam 2'},
            {'id': 6, 'name': u'Singapore 1'}
            ]
            """
    #+END_SRC
    - [ ] smallest $5 (66)
      #+BEGIN_SRC python
        from dop.client import Client
        
        client = Client('client_id', 'api_key')      
        print([size.to_json() for size in client.sizes()])
        """
        [{'id': 66, 'name': u'512MB'},
         {'id': 63, 'name': u'1GB'},
         {'id': 62, 'name': u'2GB'},
         {'id': 64, 'name': u'4GB'},
         {'id': 65, 'name': u'8GB'},
         {'id': 61, 'name': u'16GB'},
         {'id': 60, 'name': u'32GB'},
         {'id': 70, 'name': u'48GB'},
         {'id': 69, 'name': u'64GB'},
         {'id': 68, 'name': u'96GB'}]
         """        
      #+END_SRC
      To create new droplet use script below: ubuntu 64bit 13.10, ny1, 512:

      #+BEGIN_SRC python
        from dop.client import Client
        
        client = Client('client_id', 'api_key')
        client.create_droplet("test", 66, 1505699, 1)
      #+END_SRC

      adding domains record (request to this [[https://api.digitalocean.com/domains/new?client_id%3D%5Byour_client_id%5D&api_key%3D%5Byour_api_key%5D&name%3D%5Bdomain%5D&ip_address%3D%5Bip_address%5D][url]])
*** Namecheap API
    after all done with DO, now it's time to setup nameserver on namecheap

    http://developer.namecheap.com/docs/doku.php?id=api-reference:index
*** Fabric to setup server
    Use to setup:
    - [ ] copy keyfile into our new server, so we can logging in without
      entering password anymore
      #+BEGIN_SRC sh
        ssh-copy-id -i ~/.ssh/id_rsa.pub user@www.example.com
      #+END_SRC
    - [ ] logging into server

      #+BEGIN_SRC python
        #fabfile.py
        from fabric.api import *
        
        env.hosts = ["example.com"]
        env.user = "root"
        env.key_filename = "/home/banteng/.ssh/id_rsa"
        
        def testlive():
            run("uname -a")
      #+END_SRC

    - [ ] adding user
      #+BEGIN_SRC python
        #fabfile.py
        
        from fabric.api import *
        
        env.hosts = ["example.com"]
        env.user = "root"
        env.key_filename = "/home/banteng/.ssh/id_rsa"
        
        def adduser():
            run("adduser sopier")
            run("adduser sopier sudo")
        
      #+END_SRC

    - [ ] installing needed package
      #+BEGIN_SRC python
        #fabfile.py
        
        from fabric.api import *
        
        env.hosts = ["example.com"]
        env.user = "root"
        env.key_filename = "/home/banteng/.ssh/id_rsa"
        
        def installpackage():
            run("apt-get install build-essential python-dev python-pip nginx")
            run("pip install virtualenv")
      #+END_SRC

    - [ ] add / edit virtualhost into nginx
      Make a =default= file in localhost, complete with all the setup needed
      for =nginx=, then upload into server. Then rm the original file
      in =/etc/nginx/sites-available/default= with our newly created from
      local file.
    - [ ] setup uwsgi
      Same with the above step
    - [ ] run the apps!
      #+BEGIN_SRC sh
        cd /home/sopier/example.com
        nohup uwsgi uwsgi.ini &
      #+END_SRC

All of this code was *untested*, so make sure to learn the code before you use
them!
* Challenges
** Unique results
** Huge enough database with full-text support
